import telebot
import sqlite3
import re
import time
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

# Replace with your actual API token
API_TOKEN = '7594782829:AAFM9zaEblSxSnMWrVLyjsmXBieU_pfEXxQ'

# ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
TARGET_CHAT_ID = -1002208229823  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID —á–∞—Ç–∞

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∞–¥–º–∏–Ω–∫–∏
SUPER_ADMIN_ID = 1971188182  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID

bot = telebot.TeleBot(API_TOKEN)

# Initialize the database
conn = sqlite3.connect('rules.db', check_same_thread=False)
cursor = conn.cursor()

# Create tables
cursor.execute('''CREATE TABLE IF NOT EXISTS rules (
                  id INTEGER PRIMARY KEY,
                  text TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS activity (
                  user_id INTEGER PRIMARY KEY,
                  message_count INTEGER DEFAULT 0,
                  last_message_time INTEGER DEFAULT 0,
                  last_bounty INTEGER DEFAULT 0)''')  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã //–±–ª–∞–≥–æ
conn.commit()


@bot.message_handler(func=lambda message: message.chat.id != TARGET_CHAT_ID)
def ignore_other_chats(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
    return


@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    for new_member in message.new_chat_members:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup()
        rules_button = InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data="–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Ö—É–π")
        keyboard.add(rules_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        bot.send_message(
            message.chat.id,
            f"@{new_member.username if new_member.username else new_member.first_name}, –ü—Ä–∏–≤–µ—Ç!",
            reply_markup=keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
@bot.callback_query_handler(func=lambda call: call.data == "–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Ö—É–π")
def send_rules(call):
    cursor.execute("SELECT id, text FROM rules ORDER BY id")
    rules = cursor.fetchall()
    if rules:
        response = "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n" + "\n".join([f"{rule[0]}. {rule[1]}" for rule in rules])
    else:
        response = "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

    bot.send_message(call.message.chat.id, response)

@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text.startswith('//–ø—Ä–∞–≤–∏–ª–∞'))
def show_rules(message):
    cursor.execute("SELECT id, text FROM rules ORDER BY id")
    rules = cursor.fetchall()
    if rules:
        response = "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n" + "\n".join([f"{rule[0]}. {rule[1]}" for rule in rules])
    else:
        response = "–ø—Ä–∞–≤–∏–ª –Ω–µ—Ç—É —É—Ä–∞"
    bot.send_message(message.chat.id, response)

def is_admin(user_id):
    cursor.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None or user_id == SUPER_ADMIN_ID

@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text.lower() == '–∞–¥–º–∏–Ω—ã')
def show_admins(message):
    cursor.execute("SELECT user_id FROM admins")
    admins = cursor.fetchall()
    if not admins:
        bot.send_message(message.chat.id, "–∞–Ω–∞—Ä—Ö–∏—è")
        return

    admin_list = []
    for admin in admins:
        user_id = admin[0]
        try:
            user = bot.get_chat_member(TARGET_CHAT_ID, user_id).user
            username = user.username or "–ª–æ—Ö –±–µ–∑ —é–∑–∞"
            full_name = user.first_name + (f" {user.last_name}" if user.last_name else "")
            admin_list.append(f"{full_name} (@{username}) - {user_id}")
        except:
            admin_list.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user_id}")

    response = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞:\n" + "\n".join(admin_list)
    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['+–∞–¥–º–∏–Ω'])
def add_admin(message):
    user_id = message.from_user.id
    if user_id != SUPER_ADMIN_ID:
        bot.send_message(message.chat.id, "–Ω–µ—Ö–∞—á—É")
        return

    try:
        parts = message.text.split()
        if len(parts) == 2:
            username = parts[1].strip('@')
            user_info = bot.get_chat_member(TARGET_CHAT_ID, username)
            new_admin_id = user_info.user.id
            cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (new_admin_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"—Ä–∞–± —Å–∏—Å—Ç–µ–º—ã {username} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        else:
            bot.send_message(message.chat.id, "–Ω–µ—Ö–∞—á—É")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text.startswith('+–ø—Ä–∞–≤–∏–ª–æ'))
def add_rule(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.send_message(message.chat.id, "—Ç–æ–ª—å–∫–æ —Ä–∞–±—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å")
        return

    try:
        rule_text = re.match(r'^\+–ø—Ä–∞–≤–∏–ª–æ\s+(.+)', message.text, re.DOTALL)
        if rule_text:
            rule_text = rule_text.group(1).strip()
            if rule_text:
                cursor.execute("INSERT INTO rules (text) VALUES (?)", (rule_text,))
                # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                cursor.execute("SELECT id FROM rules ORDER BY id")
                remaining_rules = cursor.fetchall()
                for new_id, (old_id,) in enumerate(remaining_rules, start=1):
                    cursor.execute("UPDATE rules SET id = ? WHERE id = ?", (new_id, old_id))
                conn.commit()
                bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ö–æ–¥–∏—Ç–µ –Ω–∞—Ö—É–π")
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text.startswith('-–ø—Ä–∞–≤–∏–ª–æ'))
def delete_rule(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.send_message(message.chat.id, "—Ç–æ–ª—å–∫–æ —Ä–∞–±—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –∏—Ö —É–¥–∞–ª—è—Ç—å")
        return

    try:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            rule_id = int(parts[1])
            cursor.execute("DELETE FROM rules WHERE id = ?", (rule_id,))
            conn.commit()

            # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            cursor.execute("SELECT id FROM rules ORDER BY id")
            remaining_rules = cursor.fetchall()
            for new_id, (old_id,) in enumerate(remaining_rules, start=1):
                cursor.execute("UPDATE rules SET id = ? WHERE id = ?", (new_id, old_id))
            conn.commit()

            bot.reply_to(message, "–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ")
        elif len(parts) == 2 and parts[1] == '–≤—Å–µ':
            cursor.execute("DELETE FROM rules")
            conn.commit()
            bot.send_message(message.chat.id, "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã –ø–ª–∞–∫–µ –ø–ª–∞–∫–µ...")
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—É—á–∏—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text.lower().startswith('–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'))
def show_activity(message):
    cursor.execute("SELECT user_id, message_count FROM activity")
    all_users_activity = cursor.fetchall()
    if not all_users_activity:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    all_users_activity.sort(key=lambda x: x[1], reverse=True)
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
    total_messages = 0
    for idx, (user_id, count) in enumerate(all_users_activity[:5], start=1):
        try:
            user = bot.get_chat_member(TARGET_CHAT_ID, user_id).user
            username = user.username or "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
            full_name = user.first_name + (f" {user.last_name}" if user.last_name else "")
            response += f"{idx}. {full_name} - {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            total_messages += count
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    response += f"\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Markdown
    bot.reply_to(message, response)  # –£–±—Ä–∞–ª–∏ parse_mode

@bot.message_handler(func=lambda message: message.chat.id == TARGET_CHAT_ID and message.text)
def track_activity(message):
    user_id = message.from_user.id
    current_time = int(time.time())
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    cursor.execute(
        "INSERT INTO activity (user_id, message_count, last_message_time) VALUES (?, 1, ?) ON CONFLICT(user_id) DO UPDATE SET message_count = message_count + 1, last_message_time = ?",
        (user_id, current_time, current_time))
    conn.commit()

bot.polling()
